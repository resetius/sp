
spinitialized=0;

function initspherepack()
    if (spinitialized <> 1) then        
        link("sp", [
        "sp_lapl",
        "sp_math2geo",
        "sp_geo2math",
        "sp_math2geov",
        "sp_geo2mathv",
        "sp_func2koef",
        "sp_koef2func"
        ], "c")
        spinitialized = 1;
    end
endfunction


function lap = sp_lapl(fun)
    [nlat, nlon] = size(fun)
    lap = call("sp_lapl", ...
        fun, 2, "d", ...
        nlat, 3, "i",...
        nlon, 4, "i",...
        "out", ...
        [nlat, nlon], 1, "d")
endfunction

function geo = sp_math2geo(src)
    [nlon, nlat] = size(src)
    geo = call("sp_math2geo", ...
        src, 2, "d", ...
        nlat, 3, "i", ...
        nlon, 4, "i", ...
        "out", ...
        [nlat, nlon], 1, "d"...
    )
endfunction

function sp_geo2math = geo2math(src)
    [nlat, nlon] = size(src)
    math = call("sp_geo2math", ...
        src, 2, "d", ...
        nlat, 3, "i", ...
        nlon, 4, "i", ...
        "out", ...
        [nlon, nlat], 1, "d"...
    )
endfunction

//works with geo
function k = sp_func2koef(src)
    [nlat, nlon] = size(src)
    mdab = min(nlat, int((nlon + 2) / 2) )
    k = zeros(nlat*2*mdab,1)
    k = call("sp_func2koef", ...
        src, 2, "d", ...
        nlat, 3, "i", ...
        nlon, 4, "i", ...
        "out", ...
        size(k), 1, "d"...
    )
endfunction

function f = sp_koef2func(src, nlat, nlon)
    f = zeros(nlat,nlon)
    f = call("sp_koef2func", ...
        src, 2, "d", ...
        nlat, 3, "i", ...
        nlon, 4, "i", ...
        "out", ...
        [nlat, nlon], 1, "d"...
    )
endfunction
