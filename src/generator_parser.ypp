%{

#include <stdio.h>
#include <math.h>
#include <stdexcept>
#include <sstream>
#include <memory>

#include "generator_scanner.h"
#include "generator.h"

extern int yyerror(Parser * ptr, const char *s);

using namespace std;

%}
%union {
	char * str;
	double num;
	struct Expression * exp;
}
%parse-param { Parser * ptr }
%token NAME
%token PRECISSION
%token METHOD
%token SURFACE
%token APPROXIMATION
%token START
%token DECLARE
%token SCALAR
%token FUNCTION
%token EQUATION
%token JACOBIAN
%token DELTA
%token ARROW
%token <str> VAR
%token <num> NUMBER
%type  <exp> expr;
%type  <exp> sexpr;
%type  <exp> operator;
%right '='
%left '+' '-'
%left '*' '/'
%left ','
%right '^'
%%

body: '\n'
	| clause '\n'
	| body '\n'
	| body clause '\n'
	;

clause: 
	NAME ':' VAR 
		{
			ptr->set_name($3); free($3); 
		}
	| PRECISSION ':' VAR 
		{
			ptr->set_precission($3); 
			free($3); 
		}
	| METHOD ':' VAR 
		{
			ptr->set_method($3); 
			free($3); 
		}
	| SURFACE ':' VAR 
		{ 
			ptr->set_surface($3); 
			free($3); 
		}
	| APPROXIMATION ':' VAR 
		{ 
			ptr->set_approximation($3); 
			free($3); 
		}
	| START ':' VAR 
		{ 
			ptr->add_initial($3); 
			free($3); 
		}
	| DECLARE ':' VAR '=' expr
		{
			ptr->add_declaration($3, $5);
			free($3);
		}
	| SCALAR ':' VAR
		{ 
			ptr->add_scalar($3); 
			free($3);
		}
	| FUNCTION ':' VAR '(' VAR ',' VAR ')' 
		{ 
			ptr->add_function($3, 2); 
			free($3); free($5); free($7); 
		}
	| FUNCTION ':' VAR '(' VAR ',' VAR ',' VAR ')' 
		{ 
			ptr->add_function($3, 3); 
			free($3); free($5); free($7); free($9);
		}
	| EQUATION ':' expr { ptr->new_equation(); }
	;

expr:
	VAR 
		{ 
			$$    = ptr->new_expression(); 
			ptr->check_var($1);
			*($$) = $1; 
			fprintf(stderr, "%s\n", $1); free($1); 
		}
	| NUMBER 
		{ 
			$$    = ptr->new_expression(); 
			(*$$) = $1;
			fprintf(stderr, "%lf\n", $1); 
		}
	| VAR '[' NUMBER ']' 
		{
			$$    = ptr->new_expression();
			ptr->check_var($1);
			*($$) = $1;
			fprintf(stderr, "%s\n", $1); fprintf(stderr, "%d\n", $3); free($1); 
		}
	| '(' expr ')' { $$ = $2; }
	| expr '^' expr { (*$1) ^= *($3); $$ = $1; }
	| expr '+' expr { (*$1) += *($3); $$ = $1; }
	| expr '-' expr { (*$1) -= *($3); $$ = $1; }
	| expr '/' expr { (*$1) /= *($3); $$ = $1; }
	| expr '*' expr { (*$1) *= *($3); $$ = $1; }
	| operator '(' sexpr ')' 
		{
			(*$1)(*$3); $$ = $1; 
		}
	| expr '=' expr { fprintf(stderr, "equal \n\n"); }
	;

sexpr: expr { $$ = $1; }
	| sexpr ',' expr { (*$1) , (*$3); $$ = $1; }
	;
	
operator: JACOBIAN { $$ = ptr->new_expression(); *$$ = "Jacobian"; }
	| DELTA { $$ = ptr->new_expression(); *$$ = "Delta"; }
	;
%%
int yyerror(Parser * ptr, const char * s)
{
	std::stringstream str;
	str << "syntax error near line " << yyget_lineno();
	throw std::logic_error(str.str());
	return 0;
}

