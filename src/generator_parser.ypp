%{

#include <stdio.h>
#include <math.h>
#include <stdexcept>
#include <sstream>

#include "generator_scanner.h"
#include "generator.h"

extern int yyerror(Parser * ptr, const char *s);

%}
%union {
	char * str;
	double number;
}
%parse-param { Parser * ptr }
%token NAME
%token PRECISSION
%token METHOD
%token SURFACE
%token APPROXIMATION
%token MAP
%token SCALAR
%token FUNCTION
%token EQUATION
%token JACOBIAN
%token DELTA
%token ARROW
%token <str> VAR
%token <num> NUMBER
%right '='
%left '+' '-'
%left '*' '/'
%right '^'
%%

body: '\n'
	| clause '\n'
	| body '\n'
	| body clause '\n'
	;

clause: 
	NAME ':' VAR 
		{
			ptr->set_name($3); free($3); 
		}
	| PRECISSION ':' VAR 
		{
			ptr->set_precission($3); 
			free($3); 
		}
	| METHOD ':' VAR 
		{
			ptr->set_method($3); 
			free($3); 
		}
	| SURFACE ':' VAR 
		{ 
			ptr->set_surface($3); 
			free($3); 
		}
	| APPROXIMATION ':' VAR 
		{ 
			ptr->set_approximation($3); 
			free($3); 
		}
	| MAP ':' VAR ARROW VAR 
		{ 
			ptr->add_map($3, $5); 
			free($3); free($5); 
		}
	| SCALAR ':' VAR 
		{ 
			ptr->add_scalar($3); 
			free($3); 
		}
	| FUNCTION ':' VAR '(' VAR ',' VAR ')' 
		{ 
			ptr->add_function($3, 2); 
			free($3); free($5); free($7); 
		}
	| FUNCTION ':' VAR '(' VAR ',' VAR ',' VAR ')' 
		{ 
			ptr->add_function($3, 3); 
			free($3); free($5); free($7); free($9);
		}
	| EQUATION ':' expr { ptr->new_equation(); }
	;

expr: VAR {}
	| NUMBER {}
	| VAR '[' NUMBER ']' {}
	| '(' expr ')' {}
	| expr '^' expr {}
	| expr '+' expr {}
	| expr '-' expr {}
	| expr '/' expr {}
	| expr '*' expr {}
	| function '(' sexpr ')' {}
	| expr '=' expr {}
	;

sexpr: expr
	| sexpr ',' expr
	;
	
function: JACOBIAN {}
	| DELTA {}
	;
%%
int yyerror(Parser * ptr, const char * s)
{
	std::stringstream str;
	str << "syntax error near line " << yyget_lineno();
	ptr->error = true;
	throw std::logic_error(str.str());
	return 0;
}
